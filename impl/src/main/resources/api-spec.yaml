openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamificator API
  description: A gamification engine API

servers:
  - url: http://localhost/

security:
  - bearerAuth: []
  - apiKeyAuth: []
  - apiKeySecret: []
paths:
  /applications:
    post:
      description: create an application
      operationId: createApplication
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ApplicationCreateCommand'
      responses:
        '201':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApplicationCreateDTO'
    get:
      description: get the application for currrent API-KEY
      operationId: getApplication
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApplicationDTO'
    put:
      description: Update an application
      operationId: updateApplication
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ApplicationCreateCommand'
      responses:
        '200':
          description: updated
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BadgeCreateCommand'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadgeDTO'
    get:
      description: get the list of all badge
      operationId: getAllbadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BadgeDTO'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadgeDTO'
    put:
      description: Update a badge
      operationId: updateBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BadgeDTO'
      responses:
        '200':
          description: updated
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BadgeDTO'
  /users:
    get:
      description: get all users
      operationId: getAllUser
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /users/{uuid}:
    get:
      description: get one user, by uuid
      operationId: getUserByUUID
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserDTO'

  /rules:
    post:
      description: create a rule
      operationId: createRule
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RuleCreateCommand'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RuleDTO'

    get:
      description: get the list of all rule
      operationId: getAllRules
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleDTO'
  /rules/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
    put:
      description: update a rule
      operationId: updateRule
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RuleUpdateCommand'
      responses:
        '201':
          description: created
    delete:
      description: Delete a rule
      operationId: deleteRule
      responses:
        '204':
          description: deleted

  /pointScales:
    get:
      description: get the list of all point scales
      operationId: getAllPointScales
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointScaleDTO'
    post:
      description: create a point scale
      operationId: createPointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScaleCreateCommand'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScaleDTO'

  /pointScales/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
    get:
      description: get one point scale by id
      operationId: getPointScale
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScaleDTO'
    put:
      description: update a point scale
      operationId: updatePointScale
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PointScaleCreateCommand'
      responses:
        '201':
          description: updated
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PointScaleDTO'

  /events:
    post:
      description: create an event
      operationId: createEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateEventCommand'
      responses:
        '201':
          description: created

  /leaderboard/{pointScaleName}:
    parameters:
      - in: query
        name: per_page
        schema:
          type: integer
      - in: query
        name: page
        schema:
          type: integer
      - in: path
        name: pointScaleName
        schema:
          type: string
        required: true
    get:
      description: get the leaderboard of a point scale
      operationId: getLeaderboard
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LeaderBoardDTO'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    apiKeySecret:
      type: apiKey
      in: header
      name: X-API-SECRET
  schemas:
    ApplicationCreateCommand:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
    ApplicationDTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        url:
          type: string
          format:
            uri
    BadgeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imageUrl:
          type: string
          format: uri
    BadgeCreateCommand:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
          format: uri
    UserDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        applicationId:
          type: integer
          format: int64
    RuleCreateCommand:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/ConditionDTO'
        then:
          $ref: '#/components/schemas/ActionDTO'
    RuleUpdateCommand:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/ConditionDTO'
        then:
          $ref: '#/components/schemas/ActionDTO'
    RuleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        condition:
          $ref: '#/components/schemas/ConditionDTO'
        then:
          $ref: '#/components/schemas/ActionDTO'
    CreateEventCommand:
      type: object
      properties:
        userUUID:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        type:
          type: string
    ApplicationCreateDTO:
      type: object
      properties:
        id:
          type: integer
        key:
          type: string
        secret:
          type: string
    ActionDTO:
      type: object
      properties:
        awardBadges:
          type: array
          items:
            type: string
        awardPoints:
          type: array
          items:
            $ref: '#/components/schemas/AwardPointDTO'
    AwardPointDTO:
      type: object
      properties:
        pointScaleName:
          type: string
        value:
          type: integer
    ConditionDTO:
      type: object
      properties:
        type:
          type: string
    PointScaleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    PointScaleCreateCommand:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    UserScoreDTO:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDTO'
        score:
          type: integer
    LeaderBoardDTO:
      type: object
      properties:
        total:
          type: integer
          format: int64
        nextPage:
          type: integer
          format: int64
        numberOfPage:
          type: integer
          format: int64
        leaderboard:
          items:
            $ref: '#/components/schemas/UserScoreDTO'
